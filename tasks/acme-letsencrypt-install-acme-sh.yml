---
- name: Determine if acme.sh is installed
  ansible.builtin.stat:
    path: "{{ acme_sh_default_executable }}"
  register: is_acme_sh_installed
  when:
    - not acme_sh_uninstall or acme_sh_uninstall|bool == false
  become_user: "{{ acme_sh_become_user }}"

- name: Create  acme.sh path if acme.sh does not exist
  ansible.builtin.file:
    path: "{{ acme_sh_default_directory }}"
    state: directory
    mode: '0755'
  when:
    - not is_acme_sh_installed.stat.exists
    - not acme_sh_uninstall or acme_sh_uninstall|bool == false
  become_user: "{{ acme_sh_become_user }}"

- name: Determine if acme.sh git repository is cloned locally
  ansible.builtin.stat:
    path: "{{ acme_sh_git_clone_dest }}"
  register: is_acme_sh_cloned_locally
  when:
    - not acme_sh_uninstall or acme_sh_uninstall|bool == false
  become_user: "{{ acme_sh_become_user }}"

- name: Create acme.sh git clone directory if it does not exits
  ansible.builtin.file:
    path: "{{ acme_sh_git_clone_dest }}"
    state: directory
    mode: '0755'
  when:
    - not acme_sh_uninstall or acme_sh_uninstall|bool == false
    - not is_acme_sh_cloned_locally.stat.exists
  become_user: "{{ acme_sh_become_user }}"

- name: Git Clone https://github.com/acmesh-official/acme.sh.git
  ansible.builtin.git:
    repo: "{{ acme_sh_git_url }}"
    depth: 1
    clone: true
    dest: "{{ acme_sh_git_clone_dest }}"
  when:
    - is_acme_sh_cloned_locally.stat.exists == false
    - not acme_sh_uninstall or acme_sh_uninstall|bool == false
  become_user: "{{ acme_sh_become_user }}"

- name: Update Git Clone https://github.com/acmesh-official/acme.sh.git if already exists
  ansible.builtin.git:
    repo: "{{ acme_sh_git_url }}"
    update: true
    clone: no
    dest: "{{ acme_sh_git_clone_dest }}"
  when:
    - not acme_sh_uninstall or acme_sh_uninstall|bool == false
  become_user: "{{ acme_sh_become_user }}"

# - name: get https://raw.githubusercontent.com/acmesh-official/acme.sh/{{ acme_sh_git_version }}/acme.sh
#  ansible.builtin.get_url:
#    url: "https://raw.githubusercontent.com/acmesh-official/acme.sh/{{ acme_sh_git_version }}/acme.sh"
#    dest: "{{ acme_sh_git_clone_dest }}"
#    mode: 0744
#    force: "{{ acme_sh_git_clone_force|default(False) }}"
#  when:
#    - not acme_sh_uninstall
#    - not is_acme_sh_installed.stat.exists
#  become_user: "{{ acme_sh_become_user }}"

- name: Install acme.sh
  ansible.builtin.shell: >-
    {{ acme_sh_git_clone_dest }}/acme.sh --install
    {{ "--accountemail " + acme_sh_account_email if acme_sh_account_email else "" }}
    {{ "--home " + acme_sh_default_directory if acme_sh_default_directory else "/root/.acme.sh" }}
    --nocron
  args:
    chdir: "{{ acme_sh_git_clone_dest }}"
    creates: "{{ acme_sh_default_executable }}"
  when:
    - is_acme_sh_installed.stat.exists == false
    - not acme_sh_uninstall or acme_sh_uninstall|bool == false
  become_user: "{{ acme_sh_become_user }}"


- name: Upgrade acme.sh
  ansible.builtin.command: ./acme.sh --upgrade --auto-upgrade
  args:
    chdir: "{{ acme_sh_default_directory }}"
  when:
    - is_acme_sh_installed.stat.exists == false
    - acme_sh_upgrade or acme_sh_upgrade == true
    - not acme_sh_uninstall or acme_sh_uninstall|bool == false
  register: upgrade_result
  changed_when: upgrade_result.rc == 0 and "Upgrade success" in upgrade_result.stdout
  become_user: "{{ acme_sh_become_user }}"

- name: Use given CA authority - default Let'sEncrypt
  ansible.builtin.command: ./acme.sh --set-default-ca --server {{ acme_sh_default_server }}
  args:
    chdir: "{{ acme_sh_default_directory }}"
  when:
    - is_acme_sh_installed.stat.exists == false
    - not acme_sh_uninstall or acme_sh_uninstall|bool == false
  become_user: "{{ acme_sh_become_user }}"

- name: Create acme.sh install directory
  ansible.builtin.file:
    path: "{{ acme_sh_copy_certs_to_path }}"
    state: "directory"
    owner: "{{ acme_sh_become_user }}"
    group: "{{ acme_sh_become_user }}"
    mode: "0644"
  when:
    - not acme_sh_uninstall or acme_sh_uninstall|bool == false
  become_user: "{{ acme_sh_become_user }}"

- name: Enable acme.sh notification
  ansible.builtin.command: >-
    ./acme.sh --set-notify
    --notify-level {{ acme_sh_notify_level }}
    --notify-mode {{ acme_sh_notify_mode }}
    {% for hook in acme_sh_notify_hooks %} --notify-hook {{ hook }} {% endfor %}
  args:
    chdir: "{{ acme_sh_default_directory }}"
  environment: "{{ acme_sh_notify_env_var }}"
  when:
    - is_acme_sh_installed.stat.exists == false
    - acme_sh_enable_notify
    - acme_sh_notify_hooks | length > 0
    - acme_sh_notify_env_var.keys() | length > 0
    - not acme_sh_uninstall or acme_sh_uninstall|bool == false
  become_user: "{{ acme_sh_become_user }}"
  register: acme_notify_result
  failed_when: acme_notify_result.rc != 0
